---
// Hero.astro
---

<section class="relative h-screen pt-20 md:pt-28 flex items-center justify-center overflow-hidden">
  <!-- YouTube Video Background -->
  <div class="absolute inset-0 w-full h-full z-0">
    <!-- Loading state before video loads -->
    <div id="video-loading" class="absolute inset-0 flex items-center justify-center bg-gradient-to-r from-primary-800 to-primary-900">
      <div class="animate-pulse">
        <svg class="w-16 h-16 text-white opacity-75" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      </div>
    </div>
    
    <!-- YouTube player container -->
    <div id="youtube-player" class="absolute inset-0 w-full h-full pointer-events-none"></div>
    
    <!-- Overlay to darken the video and improve text readability -->
    <div class="absolute inset-0 bg-black opacity-60"></div>
  </div>

  <!-- Content Container - Keeping the container but removing the content -->
  <div class="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center text-white">
    <!-- Text content removed as requested -->
  </div>

  <!-- Scroll indicator -->
  <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2 z-10 animate-bounce">
    <svg 
      xmlns="http://www.w3.org/2000/svg" 
      class="h-10 w-10 text-white" 
      fill="none" 
      viewBox="0 0 24 24" 
      stroke="currentColor"
    >
      <path 
        stroke-linecap="round" 
        stroke-linejoin="round" 
        stroke-width="2" 
        d="M19 14l-7 7m0 0l-7-7m7 7V3" 
      />
    </svg>
  </div>
</section>

<script>
  // Define the YouTube type interface
  interface YouTubePlayer {
    playVideo(): void;
    pauseVideo(): void;
  }

  interface YouTubeEvent {
    target: YouTubePlayer;
    data: number;
  }

  interface YT {
    Player: new (elementId: string, options: any) => YouTubePlayer;
    PlayerState: {
      ENDED: number;
      PLAYING: number;
      PAUSED: number;
      BUFFERING: number;
    };
  }

  // Declare the global YT variable and onYouTubeIframeAPIReady function
  declare global {
    interface Window {
      YT: YT;
      onYouTubeIframeAPIReady: () => void;
    }
  }

  // Load YouTube API
  let tag = document.createElement('script');
  tag.src = "https://www.youtube.com/iframe_api";
  let firstScriptTag = document.getElementsByTagName('script')[0];
  if (firstScriptTag && firstScriptTag.parentNode) {
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
  }

  let player: YouTubePlayer | null = null;
  
  // This function will be called by the YouTube API once it's ready
  window.onYouTubeIframeAPIReady = function() {
    player = new window.YT.Player('youtube-player', {
      videoId: 'fntymTSXGIY', // The YouTube video ID from your URL
      playerVars: {
        autoplay: 1,          // Auto-play the video
        mute: 1,              // Mute the video (required for autoplay in most browsers)
        controls: 0,          // Hide controls
        showinfo: 0,          // Hide video info
        modestbranding: 1,    // Hide YouTube logo
        loop: 1,              // Enable looping
        playlist: 'fntymTSXGIY', // Required for loop to work (same as videoId)
        disablekb: 1,         // Disable keyboard controls
        fs: 0,                // Disable fullscreen button
        rel: 0,               // Disable related videos
        iv_load_policy: 3     // Disable annotations
      },
      events: {
        'onReady': onPlayerReady,
        'onStateChange': onPlayerStateChange
      }
    });
  };

  // When the player is ready, play the video
  function onPlayerReady(event: YouTubeEvent) {
    event.target.playVideo();
    
    // Hide the loading state
    const loadingElement = document.getElementById('video-loading');
    if (loadingElement) {
      loadingElement.style.display = 'none';
    }
    
    // Make the player responsive
    resizePlayer();
    window.addEventListener('resize', resizePlayer);
  }

  // Ensure the video loops
  function onPlayerStateChange(event: YouTubeEvent) {
    // If video ended, restart it
    if (event.data === window.YT.PlayerState.ENDED) {
      if (player) {
        player.playVideo();
      }
    }
  }

  // Make the player responsive and cover the entire container
  function resizePlayer() {
    const playerElement = document.getElementById('youtube-player');
    if (!playerElement || !playerElement.parentElement) return;
    
    const containerWidth = playerElement.parentElement.offsetWidth;
    const containerHeight = playerElement.parentElement.offsetHeight;
    
    // Standard video aspect ratio: 16:9
    const videoRatio = 16/9;
    const containerRatio = containerWidth/containerHeight;
    
    let newWidth, newHeight;
    
    if (containerRatio > videoRatio) {
      // Container is wider than video aspect ratio
      newWidth = containerWidth;
      newHeight = containerWidth / videoRatio;
    } else {
      // Container is taller than video aspect ratio
      newHeight = containerHeight;
      newWidth = containerHeight * videoRatio;
    }
    
    // Center the video
    const playerIframe = document.querySelector('iframe');
    if (playerIframe) {
      playerIframe.style.width = newWidth + 'px';
      playerIframe.style.height = newHeight + 'px';
      playerIframe.style.position = 'absolute';
      playerIframe.style.top = '50%';
      playerIframe.style.left = '50%';
      playerIframe.style.transform = 'translate(-50%, -50%)';
    }
  }
</script> 